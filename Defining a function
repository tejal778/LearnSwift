
SYNTAX:

func functionName() -> returnType {
 // function's task goes here
} 

Breakdown:
The func keyword indicates the beginning of a function. It is followed by a name in camelCase format that describes the task the function performs. 
It’s best practice to give functions a descriptive yet concise name.

Following the functionName is a pair of ( ) that can hold optional input values known as parameters. (More on parameters later in the lesson!)

Following the parentheses is a return arrow (->) with the type of data the function gives back, or returns. If a function does not return a value, one of the following two syntaxes can be used:
1: func functionName() { where the -> and type are omitted entirely.
2: func functionName() -> Void { where Void is listed as the type.

Lastly, the returnType is followed by a code block that holds the code for the function’s task.

EXAMPLE:

Function to greet user ::

func greeting() -> Void {
  print("Hey there!")
  print("How are you doing today?")
} 

function name - greeting
returntype - void -> will not return any values

Note: Pasting this code into the editor and clicking “Run” will result in an empty output terminal. 
The print() statements within the function will not execute since our function hasn’t been used. 
We will explore this further in the next exercise; for now, let’s practice defining a function.

EXAMPLE:

func directionsToTimesSq() -> Void {
print("Walk 4 mins to 34th St Herald Square train station.")
print("Take the Northbound N, Q, R, or W train 1 stop.")
print("Get off the Times Square 42nd Street stop.")
print("Take lots of pictures! 📸")
}

No output on compilation.
